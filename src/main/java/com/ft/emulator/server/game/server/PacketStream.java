package com.ft.emulator.server.game.server;

import com.ft.emulator.common.utilities.BitKit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.Socket;

public class PacketStream {

    private final static Logger logger = LoggerFactory.getLogger("main");

    private final byte[] serialTable = {
	    (byte)0xF2, (byte)0x30, (byte)0x75, (byte)0x86, (byte)0xD4, (byte)0x7D, (byte)0x57, (byte)0x38, (byte)0x6E, (byte)0x68,
	    (byte)0x4F, (byte)0x7E, (byte)0x30, (byte)0x58, (byte)0xED, (byte)0x7D, (byte)0x5C, (byte)0x47, (byte)0xC3, (byte)0x31,
	    (byte)0xCA, (byte)0x2B, (byte)0x5F, (byte)0x56, (byte)0xC8, (byte)0x7A, (byte)0x65, (byte)0x34, (byte)0xF6, (byte)0x62,
	    (byte)0x31, (byte)0x5B, (byte)0x00, (byte)0x38, (byte)0x15, (byte)0x5B, (byte)0xD8, (byte)0x2F, (byte)0xA7, (byte)0x57,
	    (byte)0xB8, (byte)0x79, (byte)0x3D, (byte)0x3C, (byte)0x40, (byte)0x6C, (byte)0xFB, (byte)0x89, (byte)0xBE, (byte)0x63,
	    (byte)0x19, (byte)0x5F, (byte)0x36, (byte)0x57, (byte)0xC1, (byte)0x81, (byte)0xEC, (byte)0x52, (byte)0x15, (byte)0x58,
	    (byte)0x2A, (byte)0x35, (byte)0x3B, (byte)0x7F, (byte)0x6A, (byte)0x7E, (byte)0xF9, (byte)0x40, (byte)0x44, (byte)0x7E,
	    (byte)0xF7, (byte)0x3F, (byte)0xD8, (byte)0x6E, (byte)0xA5, (byte)0x57, (byte)0xA8, (byte)0x2D, (byte)0x43, (byte)0x57,
	    (byte)0xC2, (byte)0x56, (byte)0x4D, (byte)0x63, (byte)0xF4, (byte)0xCB, (byte)0xBD, (byte)0x81, (byte)0x4E, (byte)0x7E,
	    (byte)0xB5, (byte)0x5E, (byte)0x1A, (byte)0x5F, (byte)0xB1, (byte)0x5A, (byte)0x8A, (byte)0x37, (byte)0xB5, (byte)0x53,
	    (byte)0x14, (byte)0xA5, (byte)0xEB, (byte)0x56, (byte)0x5B, (byte)0x60, (byte)0xD1, (byte)0x63, (byte)0x70, (byte)0x57,
	    (byte)0xF5, (byte)0x64, (byte)0xC6, (byte)0xAD, (byte)0xD7, (byte)0x57, (byte)0xCC, (byte)0x5E, (byte)0x2D, (byte)0x31,
	    (byte)0x04, (byte)0x7E, (byte)0xEB, (byte)0x56, (byte)0xE7, (byte)0x38, (byte)0xE5, (byte)0x63, (byte)0xD4, (byte)0x57,
	    (byte)0x3D, (byte)0x59, (byte)0x96, (byte)0x38, (byte)0x77, (byte)0x67, (byte)0xC0, (byte)0x60, (byte)0x2D, (byte)0x31,
	    (byte)0x1A, (byte)0xD1, (byte)0xD9, (byte)0x86, (byte)0xDE, (byte)0x7D, (byte)0x07, (byte)0x4C, (byte)0xCE, (byte)0x58,
	    (byte)0x87, (byte)0x7D, (byte)0x08, (byte)0x58, (byte)0xD9, (byte)0x7D, (byte)0x04, (byte)0x2C, (byte)0xCF, (byte)0x2F,
	    (byte)0x16, (byte)0x7B, (byte)0xB7, (byte)0x58, (byte)0xFA, (byte)0x7A, (byte)0x45, (byte)0x40, (byte)0xEA, (byte)0x64,
	    (byte)0x73, (byte)0x82, (byte)0x46, (byte)0x5B, (byte)0x79, (byte)0x5B, (byte)0xC0, (byte)0x7E, (byte)0xC5, (byte)0x57,
	    (byte)0x58, (byte)0x89, (byte)0x69, (byte)0x3D, (byte)0x86, (byte)0x6C, (byte)0xB5, (byte)0x89, (byte)0x2E, (byte)0x62,
	    (byte)0xE9, (byte)0x66, (byte)0x66, (byte)0x59, (byte)0xDF, (byte)0x81, (byte)0xB4, (byte)0x53, (byte)0xCD, (byte)0x63,
	    (byte)0xDC, (byte)0x7D, (byte)0x8B, (byte)0x57, (byte)0x84, (byte)0x91, (byte)0xE9, (byte)0x5A, (byte)0x60, (byte)0x30,
	    (byte)0xB1, (byte)0x67, (byte)0x0A, (byte)0x38, (byte)0x81, (byte)0x62, (byte)0x72, (byte)0x3B, (byte)0x55, (byte)0x63,
	    (byte)0x62, (byte)0x34, (byte)0x31, (byte)0x7F, (byte)0x38, (byte)0x7E, (byte)0x59, (byte)0x31, (byte)0xCC, (byte)0x91,
	    (byte)0xBF, (byte)0x40, (byte)0xE2, (byte)0x6E, (byte)0xD7, (byte)0x57, (byte)0xE0, (byte)0x2C, (byte)0x2B, (byte)0x5B,
	    (byte)0x04, (byte)0x7E, (byte)0xBD, (byte)0x57, (byte)0x84, (byte)0x91, (byte)0x79, (byte)0x5C, (byte)0x8C, (byte)0x31,
	    (byte)0xC5, (byte)0x67, (byte)0x1E, (byte)0x38, (byte)0xB3, (byte)0x62, (byte)0x02, (byte)0x3D, (byte)0x3D, (byte)0x67,
	    (byte)0x62, (byte)0x34, (byte)0x31, (byte)0x7F, (byte)0x38, (byte)0x7E, (byte)0x77, (byte)0x31, (byte)0xCC, (byte)0x91,
	    (byte)0x23, (byte)0x41, (byte)0x0E, (byte)0x70, (byte)0x9F, (byte)0x58, (byte)0xA8, (byte)0x2D, (byte)0x49, (byte)0x5B,
	    (byte)0x2E, (byte)0xD1, (byte)0x21, (byte)0x85, (byte)0x9E, (byte)0x77, (byte)0xD7, (byte)0x3A, (byte)0xB0, (byte)0x58,
	    (byte)0xB7, (byte)0x75, (byte)0x08, (byte)0x58, (byte)0xD9, (byte)0x7D, (byte)0x04, (byte)0x2C, (byte)0xCF, (byte)0x2F,
	    (byte)0x94, (byte)0x7F, (byte)0x7B, (byte)0x58, (byte)0xE7, (byte)0x38, (byte)0xDB, (byte)0x63, (byte)0xC0, (byte)0x57,
	    (byte)0x75, (byte)0x58, (byte)0x66, (byte)0x40, (byte)0x3F, (byte)0x68, (byte)0x5C, (byte)0x60, (byte)0xCD, (byte)0x40,
	    (byte)0x5E, (byte)0x89, (byte)0x6E, (byte)0x3D, (byte)0x72, (byte)0x6C, (byte)0xBF, (byte)0x89, (byte)0x22, (byte)0x64,
	    (byte)0xE9, (byte)0x66, (byte)0x06, (byte)0x69, (byte)0x97, (byte)0x8D, (byte)0x7C, (byte)0x54, (byte)0x31, (byte)0x64,
	    (byte)0x02, (byte)0x2B, (byte)0x6B, (byte)0x68, (byte)0xC2, (byte)0x7B, (byte)0xEF, (byte)0x40, (byte)0x36, (byte)0x64,
	    (byte)0x4B, (byte)0x87, (byte)0x68, (byte)0x5C, (byte)0x77, (byte)0x67, (byte)0x64, (byte)0x8F, (byte)0xCD, (byte)0x4F,
	    (byte)0x8E, (byte)0x35, (byte)0xF9, (byte)0x7F, (byte)0x74, (byte)0x7E, (byte)0x81, (byte)0x31, (byte)0xFE, (byte)0x91,
	    (byte)0x87, (byte)0x41, (byte)0x72, (byte)0x70, (byte)0x03, (byte)0x59, (byte)0xD6, (byte)0x2C, (byte)0x53, (byte)0x5B,
	    (byte)0xF6, (byte)0xD1, (byte)0xDD, (byte)0x87, (byte)0xD0, (byte)0x77, (byte)0xE1, (byte)0x3A, (byte)0xF6, (byte)0x58,
	    (byte)0xDF, (byte)0x75, (byte)0xD0, (byte)0x58, (byte)0x15, (byte)0x7E, (byte)0xD2, (byte)0x2B, (byte)0xF7, (byte)0x2F,
	    (byte)0x5E, (byte)0x79, (byte)0xFB, (byte)0x50, (byte)0x26, (byte)0x7C, (byte)0x59, (byte)0x40, (byte)0x56, (byte)0x62,
	    (byte)0xAF, (byte)0x87, (byte)0xCC, (byte)0x5C, (byte)0xB5, (byte)0x5B, (byte)0xC3, (byte)0x7F, (byte)0xF9, (byte)0x50,
	    (byte)0x00, (byte)0x3C, (byte)0xDD, (byte)0x2D, (byte)0xFA, (byte)0x34, (byte)0x91, (byte)0x5D, (byte)0xC4, (byte)0x30,
	    (byte)0xE1, (byte)0x5F, (byte)0x6E, (byte)0x38, (byte)0x49, (byte)0x63, (byte)0xBA, (byte)0x2F, (byte)0x85, (byte)0xD8,
	    (byte)0x1E, (byte)0x7A, (byte)0xED, (byte)0x56, (byte)0xB5, (byte)0x38, (byte)0xB3, (byte)0x63, (byte)0xCA, (byte)0x57,
	    (byte)0x49, (byte)0x57, (byte)0x32, (byte)0x38, (byte)0xE3, (byte)0x5A, (byte)0x90, (byte)0x54, (byte)0x15, (byte)0x67,
	    (byte)0x62, (byte)0x89, (byte)0x9B, (byte)0x3D, (byte)0x7C, (byte)0x6C, (byte)0x8D, (byte)0x89, (byte)0x8E, (byte)0x52,
	    (byte)0x21, (byte)0x66, (byte)0xD6, (byte)0x57, (byte)0xDF, (byte)0x81, (byte)0xB4, (byte)0x53, (byte)0x2D, (byte)0x54,
	    (byte)0x62, (byte)0x34, (byte)0x1B, (byte)0x30, (byte)0x38, (byte)0x7E, (byte)0x45, (byte)0x31, (byte)0xCC, (byte)0x91,
	    (byte)0x83, (byte)0x40, (byte)0x8A, (byte)0x53, (byte)0xAB, (byte)0x56, (byte)0x9A, (byte)0x2C, (byte)0x17, (byte)0x5B,
	    (byte)0x12, (byte)0x52, (byte)0xFB, (byte)0x50, (byte)0xCE, (byte)0x79, (byte)0x27, (byte)0x40, (byte)0x42, (byte)0x62,
	    (byte)0x1F, (byte)0x86, (byte)0x10, (byte)0x5A, (byte)0xBF, (byte)0x5B, (byte)0xDC, (byte)0x7B, (byte)0xCD, (byte)0x4F,
	    (byte)0xDC, (byte)0x7D, (byte)0x8B, (byte)0x57, (byte)0x84, (byte)0x91, (byte)0xB9, (byte)0x62, (byte)0x28, (byte)0x31,
	    (byte)0x15, (byte)0x68, (byte)0x39, (byte)0x30, (byte)0xB1, (byte)0x5A, (byte)0x39, (byte)0x30, (byte)0x75, (byte)0x34,
	    (byte)0x2E, (byte)0xD1, (byte)0xEF, (byte)0x84, (byte)0x9E, (byte)0x77, (byte)0xD7, (byte)0x3A, (byte)0x20, (byte)0x57,
	    (byte)0xB7, (byte)0x75, (byte)0x78, (byte)0x56, (byte)0xD9, (byte)0x7D, (byte)0x04, (byte)0x2C, (byte)0x6B, (byte)0x2F,
	    (byte)0xE4, (byte)0x2F, (byte)0x49, (byte)0x57, (byte)0xF7, (byte)0x5F, (byte)0x2D, (byte)0x58, (byte)0x5C, (byte)0x6B,
	    (byte)0x25, (byte)0x5D, (byte)0x96, (byte)0x38, (byte)0x67, (byte)0x40, (byte)0x8E, (byte)0x60, (byte)0x19, (byte)0x31,
	    (byte)0x1B, (byte)0x30, (byte)0xC9, (byte)0x2D, (byte)0x76, (byte)0x45, (byte)0x15, (byte)0x7A, (byte)0x2E, (byte)0x62,
	    (byte)0x61, (byte)0x53, (byte)0xAA, (byte)0x56, (byte)0x9B, (byte)0x84, (byte)0x3C, (byte)0x67, (byte)0xCD, (byte)0x63,
	    (byte)0x01, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00
    };

    private InputStream inputStream;
    private OutputStream outputStream;

    private byte[] decryptKey;
    private byte[] encryptKey;

    private int header1Key = 0;

    private int indicator;

    public PacketStream(Socket clientSocket, byte[] decryptKey, byte[] encryptKey) throws IOException {

        this.inputStream = clientSocket.getInputStream();
        this.outputStream = clientSocket.getOutputStream();

        this.decryptKey = decryptKey;
        this.encryptKey = encryptKey;
    }

    public byte[] decryptBytes(byte[] encryptedBuffer, int size) {

        byte[] decrypted = new byte[size];
        BitKit.blockCopy(encryptedBuffer, 0, decrypted, 0, size);

        for(int i = 0; i < size; i++)
            decrypted[i] ^= this.decryptKey[(i & 3)];

        return decrypted;
    }

    public short createSerial(byte[] data) {

        int pos = (((this.header1Key << 4) - this.header1Key * 4 + this.indicator) * 2);
        short header = BitKit.bytesToShort(serialTable, pos);

        data[0] = BitKit.getBytes(header)[0];
        data[1] = BitKit.getBytes(header)[1];

        this.indicator += 1;
        this.indicator = this.indicator % 60;

        return header;
    }

    public short createCheckSum(byte[] data) {

        short v2 = (short)((data[0] & 0xFF) + (data[1] & 0xFF) + (data[4] & 0xFF) + (data[5] & 0xFF) + (data[6] & 0xFF) + (data[7] & 0xFF));
        long tempV2 = v2 & 0x80000001L;

        boolean v1 = tempV2 == 0;

        short result = 0;

        if(tempV2 < 0)
            v1 = ((tempV2 - 1) | 0xFFFFFFFE) == -1;

        if(v1) {
            result = (short)(v2 + 1587);

            data[2] = BitKit.getBytes(result)[0];
            data[3] = BitKit.getBytes(result)[1];
	}
        else {
            result = (short)(v2 + 1568);

	    data[2] = BitKit.getBytes(result)[0];
	    data[3] = BitKit.getBytes(result)[1];
	}

        return result;
    }

    public byte[] encryptBytes(byte[] decryptedBuffer, int size) {
        return decryptedBuffer;
    }

    public int read(byte[] buffer, int offset, int size) {

        byte[] encryptedBuffer = new byte[size];

        try {

	    int result = this.inputStream.read(encryptedBuffer, 0, size);
	    BitKit.blockCopy(this.decryptBytes(encryptedBuffer, size), 0, buffer, offset, size);
	    return result;
	}
        catch (IOException ioe) {
            logger.error("Couldn't read!");
            logger.error(ioe.getMessage());
	}
        return -1;
    }

    public void write(byte[] buffer, int offset, int size) {

        this.createSerial(buffer);
        this.createCheckSum(buffer);

        byte[] encrypted = this.encryptBytes(buffer, buffer.length);

        try {

	    this.outputStream.write(buffer, offset, size);
	}
        catch (IOException ioe) {
	    logger.error("Couldn't write!");
	    logger.error(ioe.getMessage());
	}
    }

    public void write(Packet packet) {

        logger.info("SEND [" + String.format("0x%x", (int)packet.getPacketId()) + "] " + BitKit.toString(packet.getRawPacket(), 0, packet.getDataLength() + 8));
        this.write(packet.getRawPacket(), 0, packet.getDataLength() + 8);
    }
}